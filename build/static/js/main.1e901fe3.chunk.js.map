{"version":3,"sources":["logo.svg","components/Container.js","extras/Header.js","extras/OneRoom.js","extras/Card.js","components/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","props","socket","socketIOClient","useState","messages","setMessages","message","setMessage","yourID","setYourID","name","setName","sendMessage","e","preventDefault","messageObject","body","id","emit","useEffect","tempName","prompt","on","oldMsgs","receivedMessage","newUserJoined","Fragment","className","style","width","isMobile","textAlign","padding","fontSize","location","state","color","groupName","map","item","index","textTransform","onSubmit","value","onChange","target","placeholder","paddingLeft","Button","variant","height","backgroundColor","marginLeft","onClick","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","OneRoom","Card","borderLeft","marginTop","marginBottom","CardContent","display","justifyContent","alignItems","icon","handleOpenDialog","RoomsContainer","history","useHistory","rooms","password","open","setOpen","setPassword","currentIndex","setCurrentIndex","handleClose","fontWeight","Dialog","onClose","aria-labelledby","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","DialogActions","push","pathname","alert","LandingPage","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.1e901fe3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { isMobile } from \"react-device-detect\";\nimport Button from \"@material-ui/core/Button\";\n\nconst ENDPOINT = \"http://localhost:8000\";\n\nexport default function Container(props) {\n  const socket = socketIOClient(ENDPOINT);\n  // console.log(\"props :>> \", props);\n\n  // Array of messages\n  const [messages, setMessages] = useState([]);\n  //  Current message\n  const [message, setMessage] = useState(\"\");\n  // Your ID\n  const [yourID, setYourID] = useState(null);\n  // Your name\n  const [name, setName] = useState(null);\n\n  useEffect(() => {\n    let tempName = prompt(\"What is your name\");\n    setName(tempName);\n    socket.emit(\"new-user-joined\", tempName);\n\n    socket.on(\"your id\", (id) => {\n      setYourID(id);\n    });\n\n    socket.on(\"recieve\", (message) => {\n      // console.log(\"here\");\n      // console.log(\"message :>> \", message);\n      receivedMessage(message);\n    });\n\n    socket.on(\"user-joined\", (name) => {\n      // console.log(\"name :>> \", name);\n      newUserJoined(name);\n    });\n  }, []);\n\n  function receivedMessage(message) {\n    setMessages((oldMsgs) => [...oldMsgs, message]);\n  }\n\n  function sendMessage(e) {\n    e.preventDefault();\n    const messageObject = {\n      body: message,\n      id: yourID,\n      name: name,\n    };\n    setMessage(\"\");\n    socket.emit(\"send\", messageObject);\n  }\n\n  function newUserJoined(message) {\n    setMessages((oldMsgs) => [...oldMsgs, message]);\n  }\n\n  function handleChange(e) {\n    setMessage(e.target.value);\n  }\n\n  // console.log(\"messages :>> \", messages);\n\n  return (\n    <React.Fragment>\n      <div className=\"main-container\">\n        <div\n          className=\"container\"\n          style={{ width: isMobile ? \"90vw\" : \"70vw\" }}\n        >\n          <div\n            style={{\n              textAlign: \"center\",\n              padding: \"10px 0px\",\n              fontSize: \"25px\",\n            }}\n          >\n            Chat App\n          </div>\n          {props.location.state ? (\n            <div\n              style={{\n                textAlign: \"center\",\n                padding: \"5px 0px\",\n                fontSize: \"15px\",\n                color: \"#4a5568\",\n              }}\n            >\n              Group Name : {props.location.state.groupName}\n            </div>\n          ) : null}\n          {messages.map((item, index) => {\n            if (!item.message) {\n              return (\n                <div className=\"centerBlockMessage\">{item} joined the chat</div>\n              );\n            }\n            if (item.message.id === yourID) {\n              return (\n                <div className=\"rightBlockMessage\">\n                  <span style={{ textTransform: \"capitalize\" }}>\n                    {item.message.name}\n                  </span>{\" \"}\n                  : {item.message.body}\n                </div>\n              );\n            }\n            return (\n              <div className=\"leftBlockMessage\">\n                <span style={{ textTransform: \"capitalize\" }}>\n                  {item.message.name}\n                </span>{\" \"}\n                : {item.message.body}\n              </div>\n            );\n          })}\n        </div>\n        <form onSubmit={sendMessage}>\n          <input\n            value={message}\n            onChange={handleChange}\n            placeholder=\"Say something...\"\n            className=\"messageContainer\"\n            style={{\n              width: isMobile ? \"75vw\" : \"65vw\",\n              paddingLeft: \"5px\",\n            }}\n          />\n          <Button\n            className=\"sendButton\"\n            variant=\"contained\"\n            style={{\n              width: isMobile ? \"15vw\" : \"5vw\",\n              height: isMobile ? \"100%\" : \"fit-content\",\n              backgroundColor: \"black\",\n              color: \"white\",\n              marginLeft: \"2px\",\n            }}\n            onClick={sendMessage}\n          >\n            Send\n          </Button>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport WhatsAppIcon from \"@material-ui/icons/WhatsApp\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar\n        position=\"static\"\n        className=\"header\"\n        style={{ backgroundColor: \"black\" }}\n      >\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <WhatsAppIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Let's Chat\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport PasswordDialog from \"./PasswordDialog\";\n\nexport default function OneRoom(props) {\n  return (\n    <Card\n      style={{\n        borderLeft: \"3px solid black\",\n        marginTop: \"20px\",\n        marginBottom: \"20px\",\n      }}\n    >\n      <CardContent>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"95%\",\n            alignItems: \"center\",\n          }}\n        >\n          <React.Fragment>\n            {props.icon} {props.groupName}\n          </React.Fragment>\n\n          <Button\n            variant=\"contained\"\n            style={{ backgroundColor: \"black\", color: \"white\" }}\n            onClick={props.handleOpenDialog}\n          >\n            Join\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport OneRoom from \"./OneRoom\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\n//\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { useHistory } from \"react-router\";\n//\nimport { isMobile } from \"react-device-detect\";\n\nexport default function RoomsContainer() {\n  const history = useHistory();\n  const rooms = [\n    { groupName: \"Rizvites\", icon: <SchoolIcon />, password: \"qwertyuiop\" },\n    { groupName: \"TechZ Devs\", icon: <CodeIcon />, password: \"qwertyuiop\" },\n    {\n      groupName: \"House Of Cards\",\n      icon: <LiveTvIcon />,\n      password: \"qwertyuiop\",\n    },\n  ];\n\n  const [open, setOpen] = useState(false);\n  const [password, setPassword] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(null);\n\n  function handleOpenDialog(index) {\n    setOpen(true);\n    setCurrentIndex(index);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  // console.log(\"password :>> \", password);\n  function handleJoin() {\n    if (password == rooms[currentIndex].password) {\n      history.push({\n        pathname: \"/room\",\n        state: { groupName: rooms[currentIndex].groupName },\n      });\n    } else {\n      // console.log(\"Incorrect password\");\n      alert(\"Incorrect Password\");\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Card\n        className=\"rooms-container-main\"\n        style={{ width: isMobile ? \"95vw\" : \"80vw\" }}\n      >\n        <CardContent style={{ width: \"90%\" }}>\n          <Typography\n            style={{\n              color: \"black\",\n              textAlign: \"center\",\n              fontSize: \"1.2em\",\n              fontWeight: \"bold\",\n            }}\n          >\n            Join Room\n          </Typography>\n          {rooms.map((item, index) => {\n            return (\n              <OneRoom\n                icon={item.icon}\n                groupName={item.groupName}\n                handleOpenDialog={() => handleOpenDialog(index)}\n              />\n            );\n          })}\n        </CardContent>\n      </Card>\n      {open ? (\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"form-dialog-title\"\n          fullWidth={true}\n          maxWidth=\"sm\"\n        >\n          <DialogTitle id=\"form-dialog-title\">\n            Enter Password for {rooms[currentIndex].groupName}\n          </DialogTitle>\n          <DialogContent>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              fullWidth\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Password : qwertyuiop\"\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={handleJoin} color=\"primary\">\n              Join\n            </Button>\n          </DialogActions>\n        </Dialog>\n      ) : null}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport Header from \"../extras/Header\";\nimport Typography from \"@material-ui/core/Typography\";\nimport RoomsContainer from \"../extras/Card\";\n\nexport default function LandingPage() {\n  return (\n    <React.Fragment>\n      <Header />\n      <div className=\"landingPageMainContainer\">\n        <RoomsContainer />\n      </div>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Container from \"./components/Container\";\n// Browser  router\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport LandingPage from \"./components/LandingPage\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={LandingPage} />\n        <Route path=\"/room\" component={Container} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}